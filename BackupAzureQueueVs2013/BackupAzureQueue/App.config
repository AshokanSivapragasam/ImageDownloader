<?xml version="1.0"?>
<configuration>
  <appSettings>
    <add key="deploymentId" value="4994863b329f47e5aed24a1ede684df0"/>
    <add key="subscriptionId" value="ca87dc93-813b-492f-8140-11918ab89fab"/>
    <add key="trafficMgrCertificateName" value="emailinterchangeapi-dev.trafficmanager.net"/>
    <add key="etHostSvcUrlTemplate" value="https://management.core.windows.net/{0}/services/hostedservices"/>
    <add key="getHostedServicePropertyOperationDetailedUrlTemplate"
      value="https://management.core.windows.net/{0}/services/hostedservices/{1}?embed-detail=true"/>
    <add key="getAffinityGroupsUrlTemplate" value="https://management.core.windows.net/{0}/affinitygroups/{1}"/>
    <add key="Microsoft.AppInsights.AccountId" value="{AccountId}"/>
    <add key="Microsoft.AppInsights.Instrumentationkey" value="{Instrumentationkey}"/>
    <add key="Microsoft.AppInsights.DisplayName" value="{DisplayName}"/>
    <add key="Microsoft.AppInsights.EnableMonitoring" value="{EnableMonitoring}"/>
    <add key="Microsoft.AppInsights.ApplicationInsightsID" value="{ApplicationInsightsID}"/>

    <add key="RetryAttempts" value="2"/>
    <add key="breakupTime" value="6"/>
    <add key="RequestTypesToBeTracked" value="TBN,BulkSend"/>
  </appSettings>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/>
  </startup>
  <system.serviceModel>
    <bindings>

      <wsHttpBinding>
        <binding name="WSHttpBinding_ITriggerRequestNotification" closeTimeout="00:30:00" openTimeout="00:30:00" receiveTimeout="00:30:00"
          sendTimeout="00:30:00" bypassProxyOnLocal="false" transactionFlow="false" hostNameComparisonMode="StrongWildcard" maxBufferPoolSize="296960"
          maxReceivedMessageSize="2147483647" messageEncoding="Text" textEncoding="utf-8" useDefaultWebProxy="true" allowCookies="false">
          <readerQuotas maxDepth="32" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="296960" maxNameTableCharCount="296960"/>
          <reliableSession ordered="true" inactivityTimeout="00:30:00" enabled="false"/>
          <security mode="TransportWithMessageCredential">
            <transport clientCredentialType="None" proxyCredentialType="None" realm=""/>
            <message clientCredentialType="Certificate" negotiateServiceCredential="false" algorithmSuite="Default" establishSecurityContext="false"/>
          </security>
        </binding>
      </wsHttpBinding>
    </bindings>

    <behaviors>
      <endpointBehaviors>
        <behavior name="ClientCertificateBehavior">
          <clientCredentials>
            <!--For Test for Azure-->
            <!--<clientCertificate findValue="B92BE7923BF90FF0F35A16EA66FEE2840898C912" storeLocation="LocalMachine" storeName="My" x509FindType="FindByThumbprint" />-->
            <clientCertificate findValue="EF0A4510EBA669986ECB6DD5BD790FB0E6BEF3FF" storeLocation="LocalMachine" storeName="My" x509FindType="FindByThumbprint"/>

            <!--For Test for On-Premise When Azure is down-->
            <!--<clientCertificate findValue="765D5A5B6BDD335BD7A352BB435C88BD1A1E9BC5" storeLocation="LocalMachine" storeName="My" x509FindType="FindByThumbprint"/>-->
          </clientCredentials>
        </behavior>
      </endpointBehaviors>
    </behaviors>
     <client>
      <!--Azure Primary URL-->
      <!--https://emailinterchange-test.trafficmanager.net/TriggerRequestNotification.svc-->
      <endpoint address="https://emailinterchangeapi-dev.trafficmanager.net/TriggerRequestNotification.svc" binding="wsHttpBinding"
         bindingConfiguration="WSHttpBinding_ITriggerRequestNotification" contract="AzureServiceReference.ITriggerRequestNotification" name="PrimaryEndpoint"
         behaviorConfiguration="ClientCertificateBehavior"/>

      <!--Azure Secondary URL-->
      <endpoint address="https://emailinterchangeapi.cloudapp.net/TriggerRequestNotification.svc" binding="wsHttpBinding"
         bindingConfiguration="WSHttpBinding_ITriggerRequestNotification" contract="AzureServiceReference.ITriggerRequestNotification" name="SecondaryEndpoint"
         behaviorConfiguration="ClientCertificateBehavior"/>
    </client>
     <extensions>
        <!-- In this extension section we are introducing all known service bus extensions. User can remove the ones they don't need. -->
        <behaviorExtensions>
           <add name="connectionStatusBehavior"
              type="Microsoft.ServiceBus.Configuration.ConnectionStatusElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="transportClientEndpointBehavior"
              type="Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="serviceRegistrySettings"
              type="Microsoft.ServiceBus.Configuration.ServiceRegistrySettingsElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
        </behaviorExtensions>
        <bindingElementExtensions>
           <add name="netMessagingTransport"
              type="Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement, Microsoft.ServiceBus,  Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="tcpRelayTransport"
              type="Microsoft.ServiceBus.Configuration.TcpRelayTransportElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="httpRelayTransport"
              type="Microsoft.ServiceBus.Configuration.HttpRelayTransportElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="httpsRelayTransport"
              type="Microsoft.ServiceBus.Configuration.HttpsRelayTransportElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="onewayRelayTransport"
              type="Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
        </bindingElementExtensions>
        <bindingExtensions>
           <add name="basicHttpRelayBinding"
              type="Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="webHttpRelayBinding"
              type="Microsoft.ServiceBus.Configuration.WebHttpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="ws2007HttpRelayBinding"
              type="Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="netTcpRelayBinding"
              type="Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="netOnewayRelayBinding"
              type="Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="netEventRelayBinding"
              type="Microsoft.ServiceBus.Configuration.NetEventRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
           <add name="netMessagingBinding"
              type="Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
        </bindingExtensions>
     </extensions>
  </system.serviceModel>
</configuration>
