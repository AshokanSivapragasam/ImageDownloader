<Window x:Class="SFTool.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SFTool"
        xmlns:m="clr-namespace:SFTool.Model"
        xmlns:vm="clr-namespace:SFTool.ViewModel"
        xmlns:c="clr-namespace:SFTool.ViewModel.Converters"
        mc:Ignorable="d"
        WindowState="Maximized"
        Title="Service Fabric Tool" Height="Auto" Width="Auto">
    <Window.Resources>
        <m:Connection x:Key="connection"/>
        <m:ApplicationType x:Key="applicationType"/>
        <m:Service x:Key="service"/>
        <vm:ViewModelBase x:Key="viewModel"/>
        <c:BoolToVisibilityConverter x:Key="grid2visibility"/>
        <c:InverseBoolToVisibilityConverter x:Key="grid1visibility"/>

        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0,0,0,0"
                 StrokeThickness="5"
                 Stroke="Black"
                 StrokeDashArray="1 2"
                 Opacity="0"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeViewItemStyle1" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid Margin="0,10,0,0" VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Foreground" Value="Blue"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel/>
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <SolidColorBrush x:Key="ListBox.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ListBox.Static.Border" Color="#FFABADB3"/>
        <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="#FFD9D9D9"/>
        <Style x:Key="ListViewStyle1" TargetType="{x:Type ListView}">
            <Setter Property="Background" Value="{StaticResource ListBox.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListView}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                            <ScrollViewer Focusable="false" Padding="0">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid DataContext="{Binding Source={StaticResource viewModel}}" >

        <StackPanel x:Name="ConnectionGrid"  HorizontalAlignment="Center" VerticalAlignment="Center" DataContext="{Binding connection}" Visibility="{Binding IsConnected, Converter={StaticResource grid1visibility}}" Grid.Column="1" >
            <Label x:Name="label" Content="Connect to a Cluster" HorizontalAlignment="Center" Margin="0,10" VerticalAlignment="Top" FontSize="20"/>
            <StackPanel x:Name="SecurityRadioButtonsPanel" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,0,0,30">
                <RadioButton x:Name="unsecureRadioButton"  Content="Unsecure" GroupName="Security" HorizontalAlignment="Left" Margin="10,0" VerticalAlignment="Top" IsChecked="True"/>
                <RadioButton x:Name="secureRadioButton" Content="Secure" GroupName="Security" HorizontalAlignment="Left" Margin="10,0" VerticalAlignment="Top" IsChecked="{Binding Secure, Mode=TwoWay}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,10">
                <Label x:Name="connectionUrlLabel" Content="Connection URL:" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Top" Width="120" Height="30"/>
                <TextBox x:Name="connectionUrl" Text="{Binding ClusterURL, Mode=TwoWay}" HorizontalAlignment="Left" TextWrapping="NoWrap" VerticalAlignment="Top" Margin="0" Width="300" Height="30" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,10">
                <Label x:Name="thumbprintLabel" Content="Thumbprint:" HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Top" IsEnabled="{Binding Secure}" Width="120" Height="30"/>
                <TextBox x:Name="thumbprint" Text="{Binding CertThumbprint, Mode=TwoWay}" HorizontalAlignment="Left" Margin="0" TextWrapping="NoWrap" VerticalAlignment="Top" IsEnabled="{Binding Secure}" Width="300" Height="30" ToolTip="7a8f561cfefc67384115df53cd3e6a330c96e66e"/>
            </StackPanel>
            <Button x:Name="button" Content="Connect" HorizontalAlignment="Center" Margin="0,30,0,10" VerticalAlignment="Top" FontSize="18" Command="{Binding connectCommand, Source={StaticResource viewModel}}" CommandParameter="{Binding Mode=OneWay}" Width="430" Height="30" />
            <Label x:Name="ErrorLabel" Content="{Binding ErrorMessage, Mode=TwoWay}" HorizontalAlignment="Center" Margin="0,10" VerticalAlignment="Top" Foreground="Red" Width="420" Height="30"/>
        </StackPanel>

        <Grid Visibility="{Binding Path=connection.IsConnected, Converter={StaticResource grid2visibility}}" >

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="2.5*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Label Content="{Binding Path=connection.ClusterURL }" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Margin="20,0,0,0" FontSize="24" FontWeight="Bold"/>

            <TreeView x:Name="treeView" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.Row="1" ItemsSource="{Binding Applications}" SelectedItemChanged="treeView_SelectedItemChanged"  ItemContainerStyle="{DynamicResource TreeViewItemStyle1}" Margin="5,0,5,0" >
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type m:ApplicationType}" ItemsSource="{Binding Services}">
                        <TextBlock Text="{Binding ApplicationName}" Margin="5,0,10,0" HorizontalAlignment="Stretch" TextAlignment="Center" VerticalAlignment="Center" />
                    </HierarchicalDataTemplate>
                    <DataTemplate DataType="{x:Type m:Service}" >
                        <TextBlock Text="{Binding ServiceName}" HorizontalAlignment="Stretch" Margin="3" TextAlignment="Center" VerticalAlignment="Center" />
                    </DataTemplate>
                </TreeView.Resources>
            </TreeView>

            <Button x:Name="RefreshButton" Content=" Refresh " Width="{Binding ElementName=treeView, Path=ActualWidth}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" Grid.Column="0" Grid.Row="2" Command="{Binding refreshCommand, Source={StaticResource viewModel}}"/>
            <Grid x:Name="AppGrid" Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" Visibility="{Binding AppGridEnable, Source={StaticResource viewModel}, Converter={StaticResource grid2visibility}}"  DataContext="{Binding Applications}" HorizontalAlignment="Stretch" >
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Label Content="{Binding ApplicationName}" Grid.Row="0" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="20,0,0,0" FontSize="22" FontWeight="Bold"/>

                <StackPanel x:Name="AppTypeName" Orientation="Horizontal" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="0,10,40,0">
                    <Label Content=" Type Name: " HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <Label Content="{Binding ApplicationTypeName}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="0,10,0,10">
                    <Label Content=" Type Version: "/>
                    <Label Content="{Binding TypeVersion}"/>
                </StackPanel>

                <ListView ItemsSource="{Binding ApplicationParameters , Mode=TwoWay}" Grid.Row="3" HorizontalAlignment="Stretch" VerticalAlignment="Top" Style="{DynamicResource ListViewStyle1}">

                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <Grid VerticalAlignment="Top" HorizontalAlignment="Stretch" Width="{Binding ElementName=AppTypeName, Path=ActualWidth}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*"/>
                                    <ColumnDefinition Width="1.5*"/>
                                </Grid.ColumnDefinitions>
                                <TextBox Text="{Binding Key }" IsReadOnly="True" Grid.Column="0" HorizontalAlignment="Stretch" TextWrapping="NoWrap" Margin="0,2,2,2"/>
                                <TextBox Text="{Binding Value , Mode=TwoWay}" Grid.Column="1" HorizontalAlignment="Stretch" TextWrapping="NoWrap" Margin="2,2,0,2" />
                            </Grid>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>

                <StackPanel Orientation="Horizontal" Grid.Row="4" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,20,0,0">
                    <CheckBox x:Name="RestartCheckBox" Content="Restart" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,0,0,0" IsChecked="{Binding ForceRestartEnabled}"/>
                    <Button x:Name="UpgradeButton" Content=" Upgrade " HorizontalAlignment="Left" VerticalAlignment="Top" Margin="20,0,0,0" Command="{Binding upgradeApplicationCommand, Source={StaticResource viewModel}}" CommandParameter="{Binding }" />
                   <Button x:Name="DeleteApplication" Content=" Delete " HorizontalAlignment="Left" VerticalAlignment="Top" Margin="60,0,0,0" Command="{Binding deleteApplicationCommand, Source={StaticResource viewModel}}" CommandParameter="{Binding }"/>
                </StackPanel>

                <Label x:Name="UpgradeStatusLabel" Content="{Binding ResponseStatus, Source={StaticResource viewModel}, Mode=TwoWay}" Grid.Row="5" HorizontalAlignment="Stretch" Margin="20,10,0,0" Foreground="Red" />


            </Grid>

            <Grid x:Name="ServiceGrid" Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" Visibility="{Binding ServiceGridEnable, Source={StaticResource viewModel}, Converter={StaticResource grid2visibility}}" DataContext="{Binding Path=Applications[0].Services}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Label Content="{Binding ServiceName}" Grid.Row="0" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="20,0,0,0" FontSize="22" FontWeight="Bold"/>

                <StackPanel Orientation="Horizontal" Grid.Row="1" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,10,0,0">
                    <Label Content=" Type Name: " HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    <Label Content="{Binding ServiceTypeName}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Grid.Row="2" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,10,0,0">
                    <Label Content=" Type Version: "/>
                    <Label Content="{Binding ManifestVersion}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Grid.Row="3" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,20,0,0">
                    <Label Content=""/>
                    <Button x:Name="RestartServiceButton" Content="Restart" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="30,0,0,0" Command="{Binding restartServiceCommand, Source={StaticResource viewModel}}" CommandParameter="{Binding }" />
                    <Button x:Name="RemoveServiceButton" Content=" Remove " HorizontalAlignment="Left" VerticalAlignment="Top" Margin="30,0,0,0" Command="{Binding removeServiceCommand, Source={StaticResource viewModel}}" CommandParameter="{Binding }"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Grid.Row="4" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,20,0,0">
                    <Label Content="Instance Count "/>
                    <TextBox Text="{Binding InstanceCount, Mode=TwoWay}" Margin="10,0,0,0" Width="30"/>
                    <Button x:Name="UpdateServiceButton" Content=" Update " HorizontalAlignment="Left" VerticalAlignment="Top" Margin="30,0,0,0" Command="{Binding updateServiceCommand, Source={StaticResource viewModel}}" CommandParameter="{Binding }"/>
                </StackPanel>
                <Label x:Name="responseStatusLabel" Content="{Binding ResponseStatus, Source={StaticResource viewModel}, Mode=TwoWay}" Grid.Row="5" Foreground="Red"/>


            </Grid>
        </Grid>

    </Grid>

</Window>
